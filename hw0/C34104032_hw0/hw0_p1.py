def parse_polynomial(poly_str):
    poly_str = poly_str.replace(" ", "")
    terms = []
    current_term = ""
    
    #iterate every char in the input string
    #enumerate(str): return a pair of (idx,element) in a str
    for i, char in enumerate(poly_str):
        #find a new term
        if char in "+-" and i > 0:
            #add the previous term to the result list
            terms.append(current_term)
            #start a new tern
            current_term = char
        #extend the current term(ex. a term can be extended like 2X^2)
        else:
            current_term += char
    
    #can't find a "+" or "-" in the end of the input, so we need to add the last term to the list here
    terms.append(current_term)
    #the result may be like [2X^2, Y^3, ...]
    return terms

# extract coefficient, variables, and exponents for a single "term" like 2*XY^2
def parse_term(term):
    # 1. deal with the coefficient
    #ex. X^2, +Y^3, -X, ...
    if "*" not in term:
        if term[0] == '-':
            coefficient = -1
            variables = term[1:] if len(term) > 1 else ''
        elif term[0] == '+':
            coefficient = 1
            variables = term[1:] if len(term) > 1 else ''
        else:
            coefficient = 1 if term[0].isalpha() else int(term)
            variables = term if term[0].isalpha() else ''
    #ex. 3*X^2 (split to)=> 3, X^2
    else:
        coefficient_part, variables = term.split("*")
        coefficient = int(coefficient_part)
    
    # 2. deal with variables and their exponents
    # variables: ex. XY^2 (split to)=> var_dict: ex. {X:1, Y:2}
    var_dict = {}
    current_var = ""
    for i, char in enumerate(variables):
        #check if the char is an english letter
        if char.isalpha():
            current_var = char
            var_dict[current_var] = 1
        elif char == "^":
            var_dict[current_var] = int(variables[i+1]) #the number after "^"
    
    return coefficient, var_dict

# multiply two terms
def multiply_terms(term1, term2):
    '''
    term1: 2*Y
    term2: XZ^2
    '''
    #coef: coefficient of a term
    #vars: a dict of the pairs (var:power)
    '''
    coef1: 2, vars1: {Y:1}
    coef2: 1, vars2: {X:1,Z:2}
    '''
    coef1, vars1 = parse_term(term1) 
    coef2, vars2 = parse_term(term2)
    
    '''
    new_coef: 2*1 = 2
    '''
    new_coef = coef1 * coef2
    #init the result vars: dict of the pairs (var:power)
    new_vars = vars1.copy()
    
    #items() => extract each pair of (key:value) in a dict
    '''
    new_vars: {Y:1}
    new_vars: {Y:1,X:1}
    new_vars: {Y:1,X:1,Z:2} => YXZ^2
    '''
    for var, exp in vars2.items():
        if var in new_vars:
            new_vars[var] += exp
        else:
            new_vars[var] = exp
    
    # 2*YXZ^2
    return new_coef, new_vars

# Function to convert the parsed terms back to a string format
def term_to_string(coef, vars):
    #coef: 2
    #vars: {X:1,Y:2}
    #return 2*XY^2
    if coef == 0:
        return ""
    
    # 1. vars
    var_str = ""
    for var, exp in sorted(vars.items()): #sorted the pairs(var:power) by alphabet
        if exp == 1:
            var_str += var
        else:
            var_str += f"{var}^{exp}"
    
    # 2. coef
    if coef == 1 and var_str:
        return var_str
    elif coef == -1 and var_str:
        return f"-{var_str}"
    else:
        return f"{coef}*{var_str}" if var_str else f"{coef}"

# Function to multiply multiple polynomials
def multiply_polynomials(polynomials):
    # Start with the first polynomial
    #key: an empty tuple(a term, ex. ((X,1),(Y,2)) XY^2); value: 1 (coefficient)
    result_terms = {(): 1}  #the result starting with 1
    
    #polynomials: all the (?????)
    #poly: each (?????), that is a string in a pair of parentheses()
    poly_counter = 0 #for debugging
    for poly in polynomials: 
        #parse a poly to a list of terms
        poly_terms = parse_polynomial(poly)
        #print(f"poly terms {poly_counter}: {poly_terms}")
        #the new terms generated by the multiplication of previous result and current poly
        new_result_terms = {}
        
        #iterate by each key, that is each result_term is a tuple
        result_terms_counter = 0
        for result_term in result_terms:
            #print(f"   result_term {result_terms_counter}: {result_term}")
            #multiply each term in current poly with the current result term from result_terms
            term_counter = 0
            for term in poly_terms:
                #print(f"     term {term_counter}: {term}")
                #multiply 2 terms
                #term_to_string(coef, vars)
                #dict(result_term): turn the tuple to a dict
                #ex. result_term == [('X', 1), ('Y', 2)] -> dict(result_term) ==  {'X': 1, 'Y': 2}
                coef, vars = multiply_terms(term, term_to_string(result_terms[result_term], dict(result_term))) 
                
                #sort key(vars is a dict) for a result by multiplying two terms
                multiplied_key = tuple(sorted(vars.items()))
                
                if multiplied_key in new_result_terms:
                    #already existed
                    new_result_terms[multiplied_key] += coef
                else:
                    #new one(tuple)
                    new_result_terms[multiplied_key] = coef
                
                term_counter += 1

            result_terms_counter += 1
        
        #"(current result terms)(poly2)"(ploy3)....
        #already finished the MUL for "(current result terms)" with a poly
        #so, copy the new result to the old one => (current result terms)(ploy3)....
        result_terms = new_result_terms
        #check a result_terms: if a value of a key is zero, remove this pair
        result_terms =  {k: v for k, v in result_terms.items() if v != 0}
        #print(f"   result_terms: {result_terms}")
        #go to next iteration, MUL for "(current result terms)" with the next poly
        poly_counter += 1
    
    #finish all the MULs, return the format needed
    #result_terms: dict, {((X,1),(Y,2)):2, ...} that is, 2*XY^2 + ...
    result = ""
    for vars, coef in result_terms.items():
        term_str = term_to_string(coef, dict(vars))
        if term_str:
            if (result != "") and (term_str[0] != "-"):
                result += "+"
            result += term_str
    
    return result

# Main function to do p1
def polynomial_multiplication():
    input_str = input("Input the polynomials: ")
    
    # Remove the outer parentheses and split by the ")*("
    # Removes the outer parentheses(the first and last char) from the input.
    input_str = input_str[1:-1]
    polynomials = input_str.split(")(")
    
    # Multiply all the polynomials
    result = multiply_polynomials(polynomials)
    
    print(f"Output Result: {result}")

# call the function to do p1
polynomial_multiplication()
